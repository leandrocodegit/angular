//
// Copyright 2021 Google LLC
// SPDX-License-Identifier: Apache-2.0
//

// stylelint-disable selector-class-pattern --
// Selector '.md3-*' should only be used in this project.

@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';
@use '../../sass/resolvers';
@use '../../sass/shape';
@use '../../sass/theme';
@use '../../sass/var';
@use '../../tokens';
@use './label-theme';
@use './supporting-text-theme';

$_default-deps: (
  md-sys-color: tokens.md-sys-color-values-light-dynamic(),
  md-sys-shape: tokens.md-sys-shape-values(),
  md-sys-state: tokens.md-sys-state-values(),
  md-sys-typescale: tokens.md-sys-typescale-values(),
);

@function values($deps: $_default-deps, $exclude-hardcoded-values: false) {
  $text-field-values: tokens.md-comp-filled-text-field-values(
    $deps,
    $exclude-hardcoded-values
  );
  // TODO(b/203778922): Remove *-type when type composite tokens are removed
  // Remove unused tokens.
  $values: map.remove(
    $text-field-values,
    caret-color,
    disabled-input-text-color,
    disabled-input-text-opacity,
    error-focus-caret-color,
    error-focus-input-text-color,
    error-hover-input-text-color,
    error-input-text-color,
    focus-input-text-color,
    hover-input-text-color,
    input-text-color,
    input-text-font,
    input-text-line-height,
    input-text-size,
    input-text-tracking,
    input-text-type,
    input-text-weight,
    input-text-placeholder-color,
    input-text-prefix-color,
    input-text-suffix-color,
    label-text-type,
    supporting-text-type
  );

  // Add missing tokens.
  $values: map.merge(
    $values,
    (
      container-padding-horizontal: if($exclude-hardcoded-values, null, 16px),
      container-padding-vertical: if($exclude-hardcoded-values, null, 8px),
      content-color: map.get($text-field-values, input-text-color),
      disabled-content-color:
        map.get($text-field-values, disabled-input-text-color),
      disabled-content-opacity:
        map.get($text-field-values, disabled-input-text-opacity),
      error-content-color: map.get($text-field-values, error-input-text-color),
      error-focus-content-color:
        map.get($text-field-values, error-focus-input-text-color),
      error-hover-content-color:
        map.get($text-field-values, error-hover-input-text-color),
      focus-content-color: map.get($text-field-values, focus-input-text-color),
      hover-content-color: map.get($text-field-values, hover-input-text-color),
      supporting-text-padding: if($exclude-hardcoded-values, null, 16px),
      supporting-text-padding-top: if($exclude-hardcoded-values, null, 4px),
    )
  );

  @return $values;
}

$light-theme: values();
$dark-theme: values(
  (
    md-sys-color: tokens.md-sys-color-values-dark-dynamic(),
  ),
  $exclude-hardcoded-values: true
);

@function _resolve-theme($theme, $resolvers) {
  $theme: label-theme.resolve-theme($theme, $resolvers);
  $theme: supporting-text-theme.resolve-theme($theme, $resolvers);
  $theme: shape.resolve-theme(
    $theme,
    map.get($resolvers, shape),
    container-shape
  );
  @return $theme;
}

@mixin theme($theme, $resolvers: resolvers.$material) {
  // Add resolved tokens so that $theme may specify them.
  $reference: map.merge($light-theme, _resolve-theme($light-theme, $resolvers));
  $theme: theme.validate-theme($reference, $theme);
  $theme: _resolve-theme($theme, $resolvers);
  $theme: theme.create-theme-vars($theme, filled-field);

  @include theme.emit-theme-vars($theme);
}

@mixin theme-styles($theme, $resolvers: resolvers.$material) {
  $theme: theme.validate-theme-styles($light-theme, $theme);
  $theme: _resolve-theme($theme, $resolvers);
  $theme: theme.create-theme-vars($theme, filled-field);

  & {
    @each $token, $value in $theme {
      --_#{$token}: #{$value};
    }
  }

  .md3-field__container {
    border-start-start-radius: var(--_container-shape-start-start);
    border-start-end-radius: var(--_container-shape-start-end);
    border-end-end-radius: var(--_container-shape-end-end);
    border-end-start-radius: var(--_container-shape-end-start);
    padding-top: var(--_container-padding-vertical);
    padding-bottom: var(--_container-padding-vertical);

    &::before {
      background: var(--_container-color);
    }
  }

  .md3-field__active-indicator::before {
    border-bottom-color: var(--_active-indicator-color);
    border-bottom-width: var(--_active-indicator-height);
  }

  &:not(.md3-field--with-start) {
    .md3-field__start {
      padding-inline-start: var(--_container-padding-horizontal);
    }
  }

  &:not(.md3-field--with-end) {
    .md3-field__end {
      padding-inline-end: var(--_container-padding-horizontal);
    }
  }

  &:not(.md3-field--no-label) {
    .md3-field__middle {
      padding-top: var(--_label-text-populated-line-height);
    }
  }

  &:hover {
    .md3-field__active-indicator::before {
      border-bottom-color: var(--_hover-active-indicator-color);
      border-bottom-width: var(--_hover-active-indicator-height);
    }

    .md3-field__state-layer {
      background: var(--_hover-state-layer-color);
      opacity: var(--_hover-state-layer-opacity);
    }
  }

  // Focus is on a separate element and does not need a focus selector
  .md3-field__active-indicator::after {
    border-bottom-color: var(--_focus-active-indicator-color);
    border-bottom-width: var(--_focus-active-indicator-height);
  }

  &.md3-field--disabled {
    .md3-field__active-indicator::before {
      border-bottom-color: var(--_disabled-active-indicator-color);
      border-bottom-width: var(--_disabled-active-indicator-height);
      opacity: var(--_disabled-active-indicator-opacity);
    }

    .md3-field__container::before {
      background: var(--_disabled-container-color);
      opacity: var(--_disabled-container-opacity);
    }
  }

  &:not(.md3-field--disabled).md3-field--error {
    .md3-field__active-indicator::before {
      border-bottom-color: var(--_error-active-indicator-color);
    }

    &:hover {
      .md3-field__active-indicator::before {
        border-bottom-color: var(--_error-hover-active-indicator-color);
      }

      .md3-field__state-layer {
        background: var(--_error-hover-state-layer-color);
        opacity: var(--_error-hover-state-layer-opacity);
      }
    }

    // Focus is on a separate element and does not need a focus selector
    .md3-field__active-indicator::after {
      border-bottom-color: var(--_error-focus-active-indicator-color);
    }
  }
}
